// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  lastName  String    @map("last_name")
  email     String
  password  String
  acronym   String?   @db.VarChar(10)
  active    Boolean   @default(false)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  authToken   AuthToken[]
  userHasRole UserHasRole[]

  @@map("user")
}

// Model invalid access token
model AuthToken {
  token     String  @id
  revoked   Boolean @default(false)
  userId    Int     @map("user_id")
  user      User    @relation(fields: [userId], references: [id])
  createdAt Int     @map("created_at")
  expiresAt Int     @map("expires_at")

  @@map("auth_token")
}

model CatModule {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  key         String    @db.VarChar(10)
  description String?   @db.VarChar(255)
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  // Relaciones
  permissionsModule PermissionModule[]
  permissions       Permissions[]

  @@map("cat_module") // Mapear nombre de la tabla en BD en formato snake_case
}

model CatPermissionList {
  id        Int       @id @default(autoincrement())
  name      String
  key       String    @db.VarChar(30)
  active    Boolean   @default(true)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relaciones
  permissions PermissionModule[]

  @@map("cat_permission_list")
}

model PermissionModule {
  moduleId         Int @map("module_id")
  permissionListId Int @map("permission_list_id")

  // Relaciones
  module         CatModule         @relation(fields: [moduleId], references: [id])
  permissionList CatPermissionList @relation(fields: [permissionListId], references: [id])

  @@id([moduleId, permissionListId]) // Clave primaria compuesta
  @@map("permission_module")
}

model Roles {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(30)
  key         String    @db.VarChar(30)
  description String?
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  roleHasPermission RoleHasPermissions[]
  userHasRole       UserHasRole[]

  @@map("roles")
}

model Permissions {
  id        Int       @id @default(autoincrement())
  name      String
  action    String
  active    Boolean   @default(true)
  moduleId  Int       @map("module_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  module CatModule @relation(fields: [moduleId], references: [id])

  roleHasPermission RoleHasPermissions[]

  @@map("permissions")
}

model RoleHasPermissions {
  roleId       Int @map("role_id")
  permissionId Int @map("permission_id")

  role        Roles       @relation(fields: [roleId], references: [id])
  permissions Permissions @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
  @@map("role_has_permissions")
}

model UserHasRole {
  roleId Int @map("role_id")
  userId Int @map("user_id")

  role Roles @relation(fields: [roleId], references: [id])
  user User  @relation(fields: [userId], references: [id])

  @@id([roleId, userId])
  @@map("user_has_role")
}

model Confederacy {
  id        Int       @id @default(autoincrement())
  name      String
  key       String
  active    Boolean
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  country Country[]

  @@map("confederacy")
}

model Country {
  id            Int       @id @default(autoincrement())
  name          String
  key           String
  active        Boolean
  confederacyId Int       @map("confederacy_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  confederacy Confederacy @relation(fields: [confederacyId], references: [id])

  League League[]

  @@map("country")
}

model League {
  id        Int       @id @default(autoincrement())
  name      String
  active    Boolean
  countryId Int       @map("country_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  country Country @relation(fields: [countryId], references: [id])

  team          Team[]
  leagueSeason  LeagueSeason[]
  leagueStading Standings[]    @relation("LeagueStading")

  @@map("league")
}

model Team {
  id        Int       @id @default(autoincrement())
  name      String
  active    Boolean
  leagueId  Int       @map("league_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  league      League      @relation(fields: [leagueId], references: [id])
  homeMatches Match[]     @relation("HomeTeam")
  awayMatches Match[]     @relation("AwayTeam")
  standings   Standings[] @relation("TeamStanding")

  @@map("team")
}

model LeagueSeason {
  leagueId Int     @map("league_id")
  seasonId Int     @map("season_id")
  finished Boolean @default(false)

  league League @relation(fields: [leagueId], references: [id])
  season Season @relation(fields: [seasonId], references: [id])

  @@id([leagueId, seasonId])
  @@map("league_season")
}

model Season {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(20)
  active    Boolean   @default(false)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  match        Match[]
  standings    Standings[]    @relation("SeasonStanding")
  LeagueSeason LeagueSeason[]

  @@map("season")
}

model Match {
  id         Int       @id @default(autoincrement())
  matchDay   Int       @map("match_day")
  homeScore  Int       @default(0) @map("home_score")
  awayScore  Int       @default(0) @map("away_score")
  finished   Boolean   @default(false)
  homeTeamId Int       @map("home_team_id")
  awayTeamId Int       @map("visiting_team_id")
  seasonId   Int       @map("season_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  homeTeam Team   @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeam Team   @relation("AwayTeam", fields: [awayTeamId], references: [id])
  season   Season @relation(fields: [seasonId], references: [id])

  @@map("match")
}

model Standings {
  id           Int      @id @default(autoincrement())
  played       Int      @default(0)
  won          Int      @default(0)
  draw         Int      @default(0)
  lost         Int      @default(0)
  champion     Boolean  @default(false)
  goalsScored  Int      @default(0) @map("goals_scored")
  goalsAgainst Int      @default(0) @map("goals_against")
  points       Int      @default(0)
  teamId       Int      @map("team_id")
  leagueId     Int      @map("league_id")
  seasonId     Int      @map("season_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  team   Team   @relation("TeamStanding", fields: [teamId], references: [id])
  season Season @relation("SeasonStanding", fields: [seasonId], references: [id])
  league League @relation("LeagueStading", fields: [leagueId], references: [id])

  @@map("standings")
}
